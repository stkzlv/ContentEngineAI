[tool.poetry]
name = "ContentEngineAI"
version = "0.1.0"
description = "AI-powered content automation pipeline for e-commerce platforms"
authors = ["ContentEngineAI Team <stkzlv+ContentEngineAI@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "src", from = "." }]

[tool.poetry.dependencies]
python = ">=3.12,<3.13"
pyyaml = "^6.0.1"
python-dotenv = "^1.0.1"
setuptools = "^78.1.0"
aiohttp = "^3.11.18"
httpx = "^0.27.0"
coqui-tts = "^0.26.0"
pexels-api-py = "^0.0.5"
ffmpeg-python = "^0.2.0"
freesound-api = "^1.1"
google-cloud-texttospeech = "^2.26.0" # Ensure version matches latest confirmed
aiofiles = "^24.1.0" # Ensure version matches latest confirmed
google-auth = "^2.29.0" # Added explicitly for Google Cloud auth dependency
google-api-core = "^2.18.0" # Added explicitly for Google Cloud core dependency
openai-whisper = "^20240930"
google-cloud-speech = "^2.32.0"
pysrt = "^1.1.2"
botasaurus = "^4.0.88"
beautifulsoup4 = "^4.13.4"
tenacity = "^9.1.2"


[tool.poetry.group.dev.dependencies]
pytest = "^8.3.2"
pytest-asyncio = "^0.24.0"
pytest-mock = "^3.14.0"
pytest-cov = "^5.0.0"
pytest-xdist = "^3.6.0"
pytest-timeout = "^2.3.1"
aioresponses = "^0.7.6"
httpx = "^0.27.0"
ruff = "^0.5.0"
mypy = "^1.10.1"
pre-commit = "^3.7.1"
types-PyYAML = "^6.0.12"
types-aiobotocore = "^2.22.0"
bandit = "^1.7.8"  # Security scanner
vulture = "^2.13"  # Dead code detector
safety = "^2.3.5"  # Dependency vulnerability checker
psutil = "^7.0.0"
types-psutil = "^7.0.0.20250801"
types-requests = "^2.32.4.20250809"
black = "^25.1.0"
playwright = "^1.55.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 88
target-version = "py312"
extend-exclude = [
    "venv",
    ".venv",
    "*.egg",
    "dist",
    "build",
    "__pycache__",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
]
[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "W",    # pycodestyle warnings
    "I",    # isort
    "UP",   # pyupgrade
    "B",    # flake8-bugbear (common bugs)
    "C4",   # flake8-comprehensions (better comprehensions)
    "SIM",  # flake8-simplify (code simplification)
    "S",    # bandit (security issues)
    "D",    # pydocstyle (docstring style)
    "N",    # pep8-naming (naming conventions)
]
ignore = [
    "F401",  # unused imports (handled by isort)
    "D100",  # missing docstring in public module
    "D101",  # missing docstring in public class
    "D102",  # missing docstring in public method
    "D103",  # missing docstring in public function
    "D104",  # missing docstring in public package
    "D105",  # missing docstring in magic method
    "D106",  # missing docstring in public nested class
    "D107",  # missing docstring in __init__
    "D200",  # one-line docstring should fit on one line
    "D203",  # 1 blank line required before class docstring (conflicts with D211)
    "D205",  # 1 blank line required between summary line and description
    "D213",  # multi-line docstring summary should start at second line (conflicts with D212)
    "D400",  # first line should end with a period
    "D401",  # first line should be in imperative mood
    "D415",  # first line should end with a period, question mark, or exclamation point
    "N802",  # function name should be lowercase
    "N803",  # argument name should be lowercase
    "N806",  # variable in function should be lowercase
    "S101",  # use of assert detected
    "S603",  # subprocess call - check for execution of untrusted input
    "S607",  # starting a process with a partial executable path
]
fixable = ["ALL"]
unfixable = []
[tool.ruff.lint.isort]
known-first-party = ["src"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Relaxed: Allow functions without type hints
disallow_incomplete_defs = false  # Relaxed: Allow parameters without type hints
check_untyped_defs = true
disallow_untyped_decorators = false  # Relaxed: Allow decorators without type hints
no_implicit_optional = false  # Relaxed: Allow implicit optional parameters
warn_redundant_casts = false  # Relaxed: Reduce noise from redundant casts
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = false  # Relaxed: Allow more flexible equality comparisons
mypy_path = "typings"

[[tool.mypy.overrides]]
module = "aiohttp.*"
ignore_missing_imports = false
follow_imports = "skip"

[[tool.mypy.overrides]]
module = ["botasaurus.*", "bota.*", "botasaurus_driver.*", "botasaurus_requests.*", "coqui_tts", "pexels_api_py", "freesound_api", "google.cloud", "google.api_core", "google.auth", "aiofiles", "whisper", "pexelsapi.*", "aiohttp.*", "pysrt"]
ignore_errors = true

[[tool.mypy.overrides]]
module = "src.audio.freesound_client"
ignore_errors = true

[[tool.mypy.overrides]]
module = "src.video.subtitle_generator"
ignore_errors = true

[[tool.mypy.overrides]]
module = "src.video.stock_media"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.*"
disable_error_code = ["call-arg", "arg-type", "import-untyped", "attr-defined"]

[[tool.mypy.overrides]]
module = "src.scraper.amazon.scraper"
disable_error_code = ["import-untyped"]

# Bandit security scanner configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", ".pytest_cache", ".mypy_cache", ".ruff_cache"]
skips = ["B101", "B601"]  # Skip assert_used and paramiko_calls

# Vulture dead code detector
[tool.vulture]
min_confidence = 80
exclude = [
    "venv",
    ".venv",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
    "tests",
    "outputs/coverage",
    "build",
    "dist",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:outputs/coverage",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--timeout=300",
    "--timeout-method=thread",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "external: Tests requiring external services",
    "mock: Tests using mocks",
    "asyncio: Async tests",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
