# src/utils/script_sanitizer.py
import logging
import re
from pathlib import Path

logger = logging.getLogger(__name__)


def sanitize_script(
    script: str, debug_mode: bool = False, debug_path: Path | None = None
) -> str:
    """Cleans a script generated by an LLM to make it suitable for TTS processing.

    This function removes:
    - Markdown formatting (bold, italics).
    - Speaker labels (e.g., "Voiceover:", "NARRATOR:").
    - Scene directions and timestamps in parentheses (e.g., "(Upbeat music)", "(03)").
    - ALL emojis completely (using comprehensive Unicode ranges).
    - ALL hashtags completely (e.g., #hashtag).
    - Special characters that can cause TTS issues.
    - Excess whitespace.
    - Escaped characters from markdown processing.
    """
    if not script:
        return script

    original_script = script

    # --- Start of new, more aggressive sanitization rules ---

    # Remove speaker labels like "Voiceover:", "Speaker:", etc., at the start of a line
    script = re.sub(
        r"^\s*(voiceover|speaker|narrator)\s*[:\-]\s*",
        "",
        script,
        flags=re.IGNORECASE | re.MULTILINE,
    )

    # Remove scene directions, timestamps, and other parenthetical notes
    # e.g., (Upbeat music fades in), (01), (SOUND of..)
    script = re.sub(r"\([\w\s\d,.:\-]+\)", "", script)

    # Remove ALL emojis using comprehensive Unicode ranges
    # This covers most emojis including audio, faces, objects, symbols, etc.
    emoji_pattern = re.compile(
        r"[\U0001F600-\U0001F64F"  # emoticons
        r"\U0001F300-\U0001F5FF"  # symbols & pictographs
        r"\U0001F680-\U0001F6FF"  # transport & map symbols
        r"\U0001F1E0-\U0001F1FF"  # flags (iOS)
        r"\U00002702-\U000027B0"  # dingbats
        r"\U000024C2-\U0001F251"  # enclosed characters
        r"\U0001F900-\U0001F9FF"  # supplemental symbols
        r"\U0001FA70-\U0001FAFF"  # symbols and pictographs extended-A
        r"]+",
        flags=re.UNICODE,
    )
    script = emoji_pattern.sub("", script)

    # Remove hashtags completely (# followed by word characters)
    script = re.sub(r"#\w+", "", script)

    # Clean up escaped characters that might come from markdown processing
    script = script.replace(r"\!", "!")

    # --- End of new rules ---

    # Remove markdown for bold/italics
    script = re.sub(r"\*\*(.+?)\*\*", r"\1", script)
    script = re.sub(r"__(.+?)__", r"\1", script)
    script = re.sub(r"\*([^\*]+?)\*", r"\1", script)
    script = re.sub(r"_([^_]+?)_", r"\1", script)
    script = script.replace("*", "")
    script = script.replace("_", "")

    # Replace various special characters with simpler equivalents
    replacements = {
        "—": "-",  # Em dash
        "–": "-",  # En dash
        "‘": "'",  # Left single quote
        "’": "'",  # Right single quote
        "“": '"',  # Left double quote
        "”": '"',  # Right double quote
        "…": "...",  # Ellipsis
        "•": "-",  # Bullet
        "·": "-",  # Middle dot
    }
    for char, replacement in replacements.items():
        script = script.replace(char, replacement)

    # Normalize whitespace: collapse spaces and newlines
    script = re.sub(r"[ \t]+", " ", script)  # Collapse horizontal whitespace
    script = "\n".join(
        line.strip() for line in script.split("\n") if line.strip()
    )  # Remove empty lines and leading/trailing space per line
    script = re.sub(r"\n{2,}", "\n", script)  # Collapse multiple newlines

    if debug_mode and original_script != script and debug_path:
        try:
            with open(debug_path, "w", encoding="utf-8") as f:
                f.write(
                    f"Original script:\n{original_script}\n\n"
                    f"Sanitized script:\n{script}"
                )
            logger.info(f"Debug: Saved sanitized script comparison to {debug_path}")
        except Exception as e:
            logger.error(f"Debug: Failed to save sanitized script comparison: {e}")

    return script.strip()
