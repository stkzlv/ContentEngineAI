from collections.abc import Iterator
from datetime import timedelta
from typing import Optional, Union

class SubRipTime:
    def __init__(
        self,
        hours: int = 0,
        minutes: int = 0,
        seconds: int = 0,
        milliseconds: int = 0
    ): ...

    @property
    def hours(self) -> int: ...
    @property
    def minutes(self) -> int: ...
    @property
    def seconds(self) -> int: ...
    @property
    def milliseconds(self) -> int: ...

    def __str__(self) -> str: ...
    def __ge__(self, other: SubRipTime) -> bool: ...
    def __le__(self, other: SubRipTime) -> bool: ...
    def __lt__(self, other: SubRipTime) -> bool: ...
    def __gt__(self, other: SubRipTime) -> bool: ...

class SubRipItem:
    def __init__(
        self,
        index: int | None = None,
        start: SubRipTime | None = None,
        end: SubRipTime | None = None,
        text: str = ""
    ): ...

    @property
    def index(self) -> int | None: ...
    @property
    def start(self) -> SubRipTime | None: ...
    @property
    def end(self) -> SubRipTime | None: ...
    @property
    def text(self) -> str: ...

    def __str__(self) -> str: ...

class SubRipFile(list[SubRipItem]):
    def __init__(self, items: list[SubRipItem] | None = None): ...
    def open(self, file_path: str, encoding: str = "utf-8") -> SubRipFile: ...
    def save(self, file_path: str, encoding: str = "utf-8") -> None: ...
    def __iter__(self) -> Iterator[SubRipItem]: ...

def open(file_path: str, encoding: str = "utf-8") -> SubRipFile: ...
